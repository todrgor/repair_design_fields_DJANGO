# Generated by Django 3.2.9 on 2021-11-29 15:02

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('photo', models.ImageField(blank=True, default=None, null=True, upload_to='users_avatars', verbose_name='Аватарка')),
                ('bio', models.CharField(blank=True, max_length=100, null=True, verbose_name='Самоописание/статус')),
                ('age', models.PositiveIntegerField(verbose_name='Возраст')),
                ('phone_number', models.PositiveIntegerField(unique=True, verbose_name='Номер телефона')),
                ('last_entry', models.DateTimeField(auto_now=True, verbose_name='Дата и время последней авторизации')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ExpertInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count_follovers', models.PositiveIntegerField(default=0, verbose_name='Количество подписчиков')),
                ('knowledge', models.TextField(blank=True, max_length=255, null=True, verbose_name='Стаж')),
                ('offer', models.TextField(blank=True, max_length=255, null=True, verbose_name='Какую услугу предлагает')),
                ('site', models.CharField(blank=True, max_length=255, null=True, verbose_name='Ссылка на сайт')),
                ('address', models.CharField(blank=True, max_length=255, null=True, verbose_name='Адрес')),
                ('telegram', models.PositiveIntegerField(blank=True, null=True, verbose_name='Номер телефона, к которому привязан аккаунт Telegram')),
                ('whatsapp', models.PositiveIntegerField(blank=True, null=True, verbose_name='Номер телефона, к которому привязан аккаунт WhatsApp')),
                ('viber', models.PositiveIntegerField(blank=True, null=True, verbose_name='Номер телефона, к которому привязан аккаунт Viber')),
                ('vk', models.CharField(blank=True, max_length=255, null=True, verbose_name='Ссылка на профиль ВК')),
                ('inst', models.CharField(blank=True, max_length=255, null=True, verbose_name='Ссылка на профиль Инстаграм')),
                ('ok', models.CharField(blank=True, max_length=255, null=True, verbose_name='Ссылка на профиль Одноклассники')),
                ('fb', models.CharField(blank=True, max_length=255, null=True, verbose_name='Ссылка на профиль facebook')),
                ('other', models.CharField(blank=True, max_length=255, null=True, verbose_name='Дополнительная контактная информация при необходимости')),
            ],
            options={
                'verbose_name': 'Экспертная информация о пользователе',
                'verbose_name_plural': 'Экспертная информация о пользователе',
            },
        ),
        migrations.CreateModel(
            name='SavedPubs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('when', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время сохранения публикации')),
            ],
            options={
                'verbose_name': 'Сохранённая публикация',
                'verbose_name_plural': 'Сохранённые публикации',
            },
        ),
        migrations.CreateModel(
            name='SeenPubs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('when', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Просмотренная публикация',
                'verbose_name_plural': 'Просмотренные публикации',
            },
        ),
        migrations.CreateModel(
            name='UserRoles',
            fields=[
                ('id', models.PositiveIntegerField(primary_key=True, serialize=False, verbose_name='id роли')),
                ('name', models.CharField(max_length=255, verbose_name='Значение роли')),
            ],
            options={
                'verbose_name': 'Роль пользователя',
                'verbose_name_plural': 'Роли пользователей',
            },
        ),
        migrations.CreateModel(
            name='UserSubscribes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('star_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='star', to=settings.AUTH_USER_MODEL, verbose_name='id пользователя, про чьи новые публикации подписчик получает уведомления')),
                ('subscriber_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='follower', to=settings.AUTH_USER_MODEL, verbose_name='id подписчика')),
            ],
            options={
                'verbose_name': 'Подписка пользователя',
                'verbose_name_plural': 'Подписки пользователей',
            },
        ),
    ]
